#include <iostream>
#include <cstdlib>

// Определяем длину массива в виде вставки LN со значением 10
#define LN 10


// Используем поле имен std для удобства вывода
using namespace std;


// Объявляем прототипы функций
void show(double*);
void selection_sort(double*);
int _get_max(double*, int, int);
void init_array(double*);


int main() {
    // Указатель на массив типа double
    double* arr;
    arr = new double[LN];

    // Инициализируем массив числами заданными в функции
    init_array(arr);

    // Выводим массив на экран, сортируем и снова выводим на экран
    show(arr);
    selection_sort(arr);
    show(arr);

    delete[] arr;
    return EXIT_SUCCESS;
}


void init_array(double* ptr)
{
    /*
     * Функция инициализирующая массив.
     *
     * Принимает на вход:
     *      double* ptr - указатель на первый элемент массива.
     */

    // Массив который мы копируем по адресам переданным указателем.
    double new_arr[LN] = {1., 42., -20., -5.2, -6.43, 2.3, 2.5, 0.0, 0.24, -0.54};
    // Цикл по массиву для инициализации данных.
    for(int i = 0; i < LN; i++)
    {
        ptr[i] = new_arr[i];
    }
}


void selection_sort(double* arr)
{
    /*
     *
     * Функция сортировки выбором. Ищет максимальный элемент в диапазоне от 0 до N - 1,
     * после чего меняет его с элементном стоящим в конце массива, далее сужает диапазон и так до последнего.
     * Принимает на вход:
     *      double* arr - Указатель на область памяти массива.
     *
     */
    // Обратный проход по массиву
    for(int i = LN - 1; i >= 0; i--)
    {
        // Функция смены элементов местами. Меняем местами данные в позиции i и позиции максимального элемента
        // из диапазона от 0 до i
        swap(arr[i], arr[_get_max(arr, 0, i)]);
    }
}


int _get_max(double* arr, int start, int end)
{
    /*
     *
     * Вспомогательная функция отыскивающая позицию максимального элемента массива
     * в диапазоне от start до end.
     * Принимает на вход:
     *      double* arr    - Указатель на область памяти массива
     *      int start      - Позиция элемента в начале диапазона поиска
     *      int end        - Позиция элемента в конце диапазона поиска
     * Возвращает:
     *      int position   - Позиция максимального элемента в заданном диапазоне
     *
     */

    double container = arr[start];  // Контейнер хранящий максимальное значение на каждой итерации
    int position = start;           // Контейнер хранящий позицию максимального значения на каждой итерации

    // Проход по массиву в заданном диапазоне. Первый элемент не берем так как он уже инициализировал контейнеры выше.
    for(int i = start + 1; i < end; i++)
    {
        // При условии, что элемент i больше по значению, чем уже найденный максимальный
        // обновляем значения container и position.
        if(arr[i] > container)
        {
            container = arr[i];
            position = i;
        }
    }

    return position;
}


void show(double* arr)
{
    /*
     * Функция вывода массива в консоль.
     * Принимает на вход:
     *      double* arr - Указатель на область памяти массива.
     */

    cout << "Array: [";

    for(int i=0; i < LN - 1; i++)
    {
        cout << arr[i] << ", ";
    }
    cout << arr[LN - 1] << "]\n";
}
