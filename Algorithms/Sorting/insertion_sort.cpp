#include <iostream>
#include <cstdlib>
// Определяем длину массива в виде вставки LN со значением 10
#define LN 10


// Используем поле имен std для удобства вывода
using namespace std;


// Объявляем прототипы функций
void show(double*);
void insertion_sort(double*);
void _insert(double*, int, double);
void init_array(double*);


int main()
{
    // Указатель на массив типа double
    double* arr;
    arr = new double[LN];

    // Инициализируем массив числами заданными в функции
    init_array(arr);

    // Выводим массив на экран, сортируем и снова выводим на экран
    show(arr);
    insertion_sort(arr);
    show(arr);

    delete[] arr;
    return EXIT_SUCCESS;
}


void init_array(double* ptr)
{
    /*
     * Функция инициализирующая массив.
     *
     * Принимает на вход:
     *      double* ptr - указатель на первый элемент массива.
     */

    // Массив который мы копируем по адресам переданным указателем.
    double new_arr[LN] = {1., 42., -20., -5.2, -6.43, 2.3, 2.5, 0.0, 0.24, -0.54};
    // Цикл по массиву для инициализации данных.
    for(int i = 0; i < LN; i++)
    {
        ptr[i] = new_arr[i];
    }
}


void insertion_sort(double* arr)
{
    /*
     *
     * Функция сортировки вставками. Пользуется вспомагательной функцией _insert(..)
     * для последовательной перестановки элементов по массиву.
     * Принимает на вход:
     *      double* arr - указатель на область памяти массива.
     *
     */

    // Проход по N-1 элементу с последующей его вставкой в корректную поизицию масиива.
    for(int i = 1; i < LN; i++)
    {
        _insert(arr, i, arr[i]);
    }
}


void _insert(double* arr, int pos, double value)
{
    /*
     *
     * Вспомогательная функция вставки элемента в корректную для сортировки позицию.
     * Выбирает элемент в позиции pos со значением value в корректное для сортировки место
     * проходит в обратном порядке по массиву, после чего находит такое место, где справа будут занчения
     * больше value, а слева значения меньше value.
     * Принимает на вход:
     *      double* arr    - ссылка на область памяти массива
     *      int pos        - номер позиции элемента
     *      double value   - значение которое вставляем в новую позицию
     *
     */

    int i = pos - 1;    // Вспомогательный счетчик для обратного прохода по массиву

    // Цикл обратного прохода от текущей позиции до начала.
    // Условие остановки: Пока не достигнет начала массива и текущий элемент больше, чем вставляемое значение.
    while ((i >= 0) and (arr[i] > value))
    {
        arr[i+1] = arr[i];                 // Передвигаем элемент в правую ячейку
        i--;                               // Понижаем позицию для просмотра следующего элемента
    }

    // После окончания прохода получаем позицию в которой значение
    // меньше, чем value, значит вставляем нужное значение в позицию i + 1
    arr[i + 1] = value;
}


void show(double* arr)
{
    /*
     * Функция вывода массива в консоль.
     * Принимает на вход:
     *      double* arr - Указатель на область памяти массива.
     */

    cout << "Array: [";

    for(int i=0; i < LN - 1; i++)
    {
        cout << arr[i] << ", ";
    }
    cout << arr[LN - 1] << "]\n";
}
